#!/usr/bin/env sh
set -eo pipefail

check=
staged=
fix=
run='all'
while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`

    case $PARAM in
        -c | --check )        check=1
                              ;;

        -f | --unsafe-fixes ) fix=1
                              ;;

        --staged )            staged=1
                              check=1
                              ;;

        --run )               run=$VALUE
                              ;;

        * )                   echo "I don't know this option: $1"
                              exit 1
    esac
    shift
done

echo "Running $run"

if [ -z "${check}" ];  then
      echo "linting..."
else
      echo "checking..."
fi

PREFIX=
# Collect the sources to process.
if [ -n "${staged}" ]; then
      PREFIX=$(mktemp -d)/
      git diff --cached --name-only --diff-filter=ACM -z \
            | git checkout-index --prefix="$PREFIX" -z --stdin
fi

includes() { [ -z "$2" ] || { [ -z "${1##*$2*}" ] && [ -n "$1" ];};}

function list_python_files() {
    find "$PREFIX$LINT_FOLDER_PYTHON" \
        \( -name .tox -o -name .eggs \) -prune \
        -o \
            -type f \
            -not -path '*with_errors*' \
            -not -path './.venv/*' \
            -name '*.py' \
            -print || echo ""
}


if [ "$run" == "all" ] || includes "$run" "docker"; then
if [ -z "$LINT_FILE_DOCKER" ]
then
      echo "\$LINT_FILE_DOCKER is not set. Skipping..."
elif [[ -f "$LINT_FILE_DOCKER" && ! -f "$PREFIX$LINT_FILE_DOCKER" ]]
then
      echo "$LINT_FILE_DOCKER not staged. Skipping..."
else
      echo "LINT: DOCKER"
      hadolint $PREFIX$LINT_FILE_DOCKER
fi
fi

if [ "$run" == "all" ] || includes "$run" "python"; then
if [ -z "$LINT_FOLDER_PYTHON" ]
then
      echo "\$LINT_FOLDER_PYTHON is not set. Skipping..."
elif [[ -d "$LINT_FOLDER_PYTHON" && ! -d "$PREFIX$LINT_FOLDER_PYTHON" ]]
then
      echo "$LINT_FOLDER_PYTHON directory not staged. Skipping..."
else
      echo "LINT: RUFF"
      ruff_fmt=""
      ruff_check="--fix --show-fixes"
      if [ -n "${check}" ];  then
            ruff_fmt="--check"
            ruff_check=""
      elif [ -n "${fix}" ]; then
            ruff_check="${ruff_check} --unsafe-fixes"
      fi
      ruff format $ruff_fmt "$PREFIX$LINT_FOLDER_PYTHON"
      ruff check $ruff_check "$PREFIX$LINT_FOLDER_PYTHON"
      echo "Success!"
fi
fi
